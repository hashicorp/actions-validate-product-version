
name: CI Tests
on:
  push:

permissions:
  contents: read

env:
  BATS_TAG: v1.9.0
  # We use this commit to verify that the tag hasn't been moved.
  BATS_COMMIT: 6636e2c2ef5ffe361535cb45fc61682c5ef46b71
  BATS_REPO: https://github.com/bats-core/bats-core.git

jobs:
  test-suite:
    runs-on: ubuntu-latest
    steps:
      - name: Install BATS
        run: |
          cd ../
          git clone --depth 1 --branch "$BATS_TAG" --single-branch "$BATS_REPO"
          cd bats-core/bin
          GOT_COMMIT="$(git rev-parse HEAD)"
          if [ "$GOT_COMMIT" -ne "$BATS_COMMIT" ]; then
            echo "==> FATAL: BATS tag $BATS_TAG has been moved; got ${GOT_TAG:(0:8)}; want ${BATS_TAG:(0:8)}"
            echo "==> DO NOT JUST UPDATE THE BATS_COMMIT VARIABLE, FIRST CHECK THAT THE REPO HAS NOT BEEN COMPROMISED"
            exit 1
          fi
          echo "$PWD" >> "$GITHUB_PATH"

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Run Test Suite
        run: bats --recursive ./tests/

  test-relative:
    runs-on: ubuntu-latest
    needs: [ 'test-suite' ]
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      # include the test tool in the supported builds data.
      # filter through jq to validate JSON before writing the file.
      - name: Support Test Tool
        run: |
          echo '[{"build":"oss","tool":"test_tool_plain_executable"}]' \
            | jq --compact-output \
            | tee ./supported_builds.json

      # Test with relative path
      - name: Run Action (relative path)
        uses: hashicorp/actions-validate-product-version@v1
        with:
          expected_version: '1.2.3'
          # this path is relative to the action path
          artifact_path: ./tests/testdata/test_tool_plain_executable

  test-absolute:
    runs-on: ubuntu-latest
    needs: [ 'test-suite' ]
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      # include the test tool in the supported builds data.
      # filter through jq to validate JSON before writing the file.
      - name: Support Test Tool
        run: |
          echo '[{"build":"oss","tool":"test_tool_plain_executable"}]' \
            | jq --compact-output \
            | tee ./supported_builds.json

      # Test with absolute path
      - name: Copy Test Tool to Absolute Path
        id: copy_tool
        run: |
          cp ./tests/testdata/test_tool_plain_executable "${{ runner.temp }}/test_tool_plain_executable"
      - name: Run Action (absolute path)
        uses: hashicorp/actions-validate-product-version@v1
        with:
          expected_version: '1.2.3'
          # this path is relative to the action path
          artifact_path: ${{ runner.temp }}/test_tool_plain_executable

  # test against something on the releases site that is not expected to ever pass.
  # terraform-provider-fastly is chosen arbitrarily within this category.
  test-unsupported-product:
    runs-on: ubuntu-latest
    needs: [ 'test-suite' ]
    env:
      PRODUCT: terraform-provider-fastly
    steps:
      - name: Check latest tool version
        run: |
          url="https://api.releases.hashicorp.com/v1/releases/${{ env.PRODUCT }}/latest"
          echo "::debug::Checking latest version of ${PRODUCT}: $url"
          version="$(
            curl --fail --silent --show-error "$url" \
              | jq --raw-output '.version'
          )"
          if [ -z "$version" ] ; then
            echo "::error Failed to fetch latest release of tool [$PRODUCT]" >&2
            exit 1
          fi
          echo "EXP_VERSION=${version}" >> "$GITHUB_ENV"

      - name: Run Action (expected to fail)
        id: test-version
        continue-on-error: true
        uses: hashicorp/actions-validate-product-version@v1
        with:
          expected_version: ${{ env.EXP_VERSION }}
          # the action should fail before executing the artifact
          artifact_path: /bin/false

      - name: Check Result
        if: contains(fromJSON('["success", "failure"]'), steps.test-version.outcome)
        run: |
          # invert error from previous step (expected to fail)
          echo "::debug::result: [${{ steps.test-version.outcome }}]"
          [ "${{ steps.test-version.outcome }}" = 'failure' ]

  # test against something on the releases site that is not expected to ever pass.
  # terraform-provider-fastly is chosen arbitrarily within this category.
  test-soft-fail:
    runs-on: ubuntu-latest
    needs: [ 'test-suite' ]
    env:
      PRODUCT: terraform-provider-fastly
    steps:
      - name: Check latest tool version
        run: |
          url="https://api.releases.hashicorp.com/v1/releases/${{ env.PRODUCT }}/latest"
          echo "::debug::Checking latest version of ${PRODUCT}: $url"
          version="$(
            curl --fail --silent --show-error "$url" \
              | jq --raw-output '.version'
          )"
          if [ -z "$version" ] ; then
            echo "::error Failed to fetch latest release of tool [$PRODUCT]" >&2
            exit 1
          fi
          echo "EXP_VERSION=${version}" >> "$GITHUB_ENV"

      - name: Run Action (expected to fail)
        id: test-version
        continue-on-error: true
        uses: hashicorp/actions-validate-product-version@v1
        with:
          expected_version: ${{ env.EXP_VERSION }}
          # the action should fail before executing the artifact
          artifact_path: /bin/false
          soft_fail: enabled

      - name: Check Result
        if: contains(fromJSON('["success", "failure"]'), steps.test-version.outcome)
        run: |
          # invert error from previous step (expected to fail)
          echo "::debug::result: [${{ steps.test-version.outcome }}]"
          [ "${{ steps.test-version.outcome }}" = 'success' ]
